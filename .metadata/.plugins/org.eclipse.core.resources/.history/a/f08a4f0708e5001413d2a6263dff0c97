package chessgame;

import static org.lwjgl.opengl.GL11.GL_COLOR_BUFFER_BIT;
import static org.lwjgl.opengl.GL11.GL_DEPTH_BUFFER_BIT;
import static org.lwjgl.opengl.GL11.GL_DEPTH_TEST;
import static org.lwjgl.opengl.GL11.GL_MODELVIEW;
import static org.lwjgl.opengl.GL11.GL_PROJECTION;
import static org.lwjgl.opengl.GL11.GL_TEXTURE_2D;
import static org.lwjgl.opengl.GL11.glClear;
import static org.lwjgl.opengl.GL11.glDisable;
import static org.lwjgl.opengl.GL11.glEnable;
import static org.lwjgl.opengl.GL11.glLoadIdentity;
import static org.lwjgl.opengl.GL11.glMatrixMode;
import static org.lwjgl.opengl.GL11.glOrtho;
import static org.lwjgl.opengl.GL11.glViewport;

import java.util.ArrayList;

import org.lwjgl.LWJGLException;
import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.DisplayMode;
import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;

import co.uk.tristanindustries.Entity;
import co.uk.tristanindustries.Game;

public class Game {
	private final String WINDOW_TITLE = "Chess Proto";
	
	private int width = 800;
	
	private int height = 600;
	
	private boolean fullscreen = false;
	
	private boolean mouseGrabbed = false;
	
	public static boolean gameRunning = true;
	
	private Image mainTitle;
	
	private boolean logicRequiredThisLoop;
	
	private ArrayList<ChessPiece> chessPieces = new ArrayList<ChessPiece>();
	
	private ArrayList<ChessPiece> removeList = new ArrayList<ChessPiece>();
	
	/**
	 * Construct a new game
	 */
	public Game() {
		initialise();
	}
	
	/**
	 * Sets the Window Title
	 * Self explanatory, really...
	 */
	private void setWindowTitle() {
		Display.setTitle(WINDOW_TITLE + " (" + fps + " FPS) (Easy)");
	}
	
	/**
	 * Set the display mode for the display.
	 * 
	 * @return True if the Display mode was set correctly. False if not.
	 */
	private boolean setDisplayMode() {
		try {
			DisplayMode[] dm = org.lwjgl.util.Display.getAvailableDisplayModes(
					width, height, -1, -1, -1, -1, 60, 60);

			org.lwjgl.util.Display.setDisplayMode(dm, new String[] {
					"width=" + width,
					"height=" + height,
					"freq=" + 60,
					"bpp="
							+ org.lwjgl.opengl.Display.getDisplayMode()
									.getBitsPerPixel() });
			return true;
		} catch (Exception e) {
			System.out.println("Error!");
			e.printStackTrace();
			return false;
		}
	}
	
	public void initialise() {
		// Init window beforehand
		try {
			setDisplayMode();
			setWindowTitle();
			Display.setFullscreen(fullscreen);
			Display.create();

			Mouse.setGrabbed(mouseGrabbed);

			glEnable(GL_TEXTURE_2D);

			glDisable(GL_DEPTH_TEST);

			glMatrixMode(GL_PROJECTION);
			glLoadIdentity();

			glOrtho(0, width, height, 0, -1, 1);
			glMatrixMode(GL_MODELVIEW);
			glLoadIdentity();
			glViewport(0, 0, width, height);

			// Sound initialisation
			//soundManager = new SoundManager();
			//soundManager.initialize(8);

			//SHOT_SOUND = soundManager.addSound("shot.wav");
			//HIT_SOUND = soundManager.addSound("hit.wav");
		} catch (LWJGLException le) {
			System.out.println("Game exiting - Initialisation error.");
			le.printStackTrace();
			Game.gameRunning = false;
			return;
		}

		// Create images, throw exceptions if needed
		//try {
			//mainTitle = new Image("res/mainTitle.gif");
		//} catch (SlickException se) {
			//se.printStackTrace();
		//}
		
		startGame();
	}
	
	/**
	 * Start a fresh game. Clear all pieces, and
	 * create new ones.
	 */
	private void startGame() {
		chessPieces.clear();
		initPieces();
	}
	
	/**
	 * Initialise the Chess Pieces, and a set
	 * of Pawns.
	 */
	private void initPieces() {
		// Add castles
		chessPieces.add(new ChessPiece(1, 1, ChessPiece.CASTLE, ChessPiece.COLOUR_WHITE));
		chessPieces.add(new ChessPiece(1, 8, ChessPiece.CASTLE, ChessPiece.COLOUR_WHITE));
		chessPieces.add(new ChessPiece(8, 1, ChessPiece.CASTLE, ChessPiece.COLOUR_BLACK));
		chessPieces.add(new ChessPiece(8, 8, ChessPiece.CASTLE, ChessPiece.COLOUR_BLACK));
		// Add Knights
		chessPieces.add(new ChessPiece(1, 2, ChessPiece.KNIGHT, ChessPiece.COLOUR_WHITE));
		chessPieces.add(new ChessPiece(1, 7, ChessPiece.KNIGHT, ChessPiece.COLOUR_WHITE));
		chessPieces.add(new ChessPiece(8, 2, ChessPiece.KNIGHT, ChessPiece.COLOUR_BLACK));
		chessPieces.add(new ChessPiece(8, 7, ChessPiece.KNIGHT, ChessPiece.COLOUR_BLACK));
		// Add Bishops
		chessPieces.add(new ChessPiece(1, 3, ChessPiece.BISHOP, ChessPiece.COLOUR_WHITE));
		chessPieces.add(new ChessPiece(1, 6, ChessPiece.BISHOP, ChessPiece.COLOUR_WHITE));
		chessPieces.add(new ChessPiece(8, 3, ChessPiece.BISHOP, ChessPiece.COLOUR_BLACK));
		chessPieces.add(new ChessPiece(8, 6, ChessPiece.BISHOP, ChessPiece.COLOUR_BLACK));
		// Add Queens
		chessPieces.add(new ChessPiece(1, 4, ChessPiece.QUEEN, ChessPiece.COLOUR_WHITE));
		chessPieces.add(new ChessPiece(8, 4, ChessPiece.QUEEN, ChessPiece.COLOUR_BLACK));
		// Add Kings
		chessPieces.add(new ChessPiece(1, 5, ChessPiece.KING, ChessPiece.COLOUR_WHITE));
		chessPieces.add(new ChessPiece(8, 5, ChessPiece.KING, ChessPiece.COLOUR_BLACK));
		// Add Pawns
		for(int i = 1; i <= 8; i++) {
			chessPieces.add(new ChessPiece(7, i, ChessPiece.PAWN, ChessPiece.COLOUR_WHITE));
			chessPieces.add(new ChessPiece(2, i, ChessPiece.PAWN, ChessPiece.COLOUR_BLACK));
		}
	}
	
	/**
	 * Informs the game that logic is needed, results in a game event of 
	 * some type.
	 */
	public void updateLogic() {
		logicRequiredThisLoop = true;
	}
	
	public void removeEntity(ChessPiece piece) {
		removeList.add(piece);
	}
	
	/**
	 * The main loop for the game. Clears display and calls the frameRendering
	 * method. Also updates the display.
	 * 
	 * @throws SlickException
	 */
	private void gameLoop() throws SlickException {
		while (Game.gameRunning) {
			glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
			glMatrixMode(GL_MODELVIEW);
			glLoadIdentity();

			frameRendering();

			Display.update();
		}

		//soundManager.destroy();
		Display.destroy();
	}
	
	/**
	 * Responsible for logic updates, rendering entities and handling input The
	 * main backbone for the game.
	 * 
	 * @throws SlickException
	 */
	public void frameRendering() {
		
	}
	
	public static void main(String[] args) {
		Game game = new Game();
	}
	
	public void execute() {
		
	}
}
