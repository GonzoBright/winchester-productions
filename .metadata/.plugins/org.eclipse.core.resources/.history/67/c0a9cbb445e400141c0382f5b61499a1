package co.uk.tristanindustries;

import java.awt.Rectangle;

import org.newdawn.slick.Image;

public abstract class ChessPiece {
	private float x;
	
	private float y;
	
	private int row;
	
	private int column;
	
	private int colour;
	
	private Image sprite;
	
	private float dx;
	
	private float dy;
	
	private Rectangle me = new Rectangle();

	private Rectangle him = new Rectangle();
	
	public ChessPiece(Image sprite, int x, int y, int row, int column, int colour) {
		this.sprite = sprite;
		this.x = x;
		this.y = y;
		this.row = row;
		this.column = column;
		this.colour = colour;
	}
	
	public void setPosition(int row, int column) {
		
	}
	
	public void update(long delta) {
		x += (delta * dx) / 1000;
		y += (delta * dy) / 1000;
	}

	public void setHorizontalMovement(float dx) {
		this.dx = dx;
	}

	public void setVerticalMovement(float dy) {
		this.dy = dy;
	}

	public float getHorizontalMovement() {
		return dx;
	}

	public float getVerticalMovement() {
		return dy;
	}

	public void draw() {
		sprite.draw(x, y);
	}

	public void doLogic() {
	}

	public int getX() {
		return (int) x;
	}

	public int getY() {
		return (int) y;
	}

	public boolean collidesWith(ChessPiece other) {
		me.setBounds((int) x, (int) y, sprite.getWidth(), sprite.getHeight());
		him.setBounds((int) other.x, (int) other.y, other.sprite.getWidth(), other.sprite.getHeight());

		return me.intersects(him);
	}

	public abstract void collidedWith(ChessPiece other);
}
